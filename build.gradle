task wrapper(type: Wrapper) {
    gradleVersion = '1.10'
}

buildscript {
    repositories {
        maven { url 'http://repo.springsource.org/plugins-release' }
        mavenCentral()
    }

    dependencies {
        classpath 'org.springframework.build.gradle:propdeps-plugin:0.0.1'
        classpath("net.saliman:gradle-cobertura-plugin:2.2.1") {
            exclude module: "cobertura"
        }
    }
}

def versionForSubProjects = new File(project.projectDir, "VERSION").text.trim()

assert versionForSubProjects ==~ /^\d+\.\d+\.\d+(-SNAPSHOT)?$/ : "version [$versionForSubProjects] is not in x.x.x format"

subprojects {
    apply plugin: 'groovy'
    apply plugin: 'codenarc'
    project.codenarc {
        configFile = new File(project.rootDir, 'config/codenarc/rules.groovy')
    }

    check.dependsOn("test")
    project.ext.archivesBaseName = project.name
    def mavenExclusions = ["metridoc-job-cli", "metridoc-job-ezproxy", "metridoc-job-funds", "metridoc-job-bd", , "metridoc-job-gate"]
    if(!mavenExclusions.contains(project.name)) {
        apply plugin: 'maven'

        project.ext.set("enableMaven") { Closure configurePom ->
            project.uploadArchives {
                repositories {
                    mavenDeployer {
                        repository(
                                id: project.properties.mavenRepoId ?: "Metridoc bintray repo",
                                url: project.properties.mavenRepoUrl ?: "https://api.bintray.com/maven/upennlib/metridoc/${project.properties.archivesBaseName}",
                        ) {
                            authentication(userName: project.properties.bintrayUsername, password: project.properties.bintrayPassword)
                        }

                        if (configurePom) {
                            configurePom.clone().call(pom)
                        }
                        configureOrgPomDetails(pom)
                    }
                }
            }

            project.install {
                repositories.mavenInstaller { installer ->
                    if (configurePom) {
                        configurePom.clone().call(pom)
                    }
                    configureOrgPomDetails(pom)
                }
            }

            project.task("packageJavadoc", type: Jar, dependsOn: 'groovydoc') {
                from project.groovydoc.destinationDir
                classifier = 'javadoc'
            }

            project.task("packageSources", type: Jar, dependsOn: 'classes') {
                from project.sourceSets.main.allSource
                classifier = 'sources'
            }

            project.artifacts {
                archives(project.tasks.findByName("packageJavadoc")) {
                    type = 'javadoc'
                }

                archives(project.tasks.findByName("packageSources"))
            }

            project.task("publishArchives", dependsOn: ["uploadArchives"]) << {
                def bintrayRepo = "https://api.bintray.com/content/upennlib/metridoc/" +
                        "${project.properties.archivesBaseName}/$project.version/publish"
                project.logger.info "publishing to $bintrayRepo"
                new URI(bintrayRepo).toURL().openConnection().with {
                    doOutput = true
                    doInput = true
                    // Add basic authentication header.
                    def bintrayUsername = project.properties.bintrayUsername
                    def bintrayPassword = project.properties.bintrayPassword
                    setRequestProperty "Authorization", "Basic " + "$bintrayUsername:$bintrayPassword".getBytes().encodeBase64().toString()
                    requestMethod = "POST"
                    outputStream.flush()
                    outputStream.close()
                    project.logger.info inputStream.text
                    inputStream.close()

                    assert responseCode >= 200 && responseCode < 300
                }
            }
        }
    }

    sourceCompatibility = "1.7"
    targetCompatibility = "1.7"

    buildscript {
        repositories {
            maven { url 'http://repo.springsource.org/plugins-release' }
            mavenCentral()
        }

        dependencies {
            classpath 'org.springframework.build.gradle:propdeps-plugin:0.0.1'
            classpath("net.saliman:gradle-cobertura-plugin:2.2.1") {
                exclude module: "cobertura"
            }
        }
    }

    apply plugin: 'cobertura'
    apply plugin: 'codenarc'


    group = 'com.github.metridoc'
    version = versionForSubProjects
    project.ext {
        slf4jVersion = "1.7.5"
    }

    repositories {
        mavenCentral()
        maven {
            url "http://jcenter.bintray.com/"
        }
    }

    dependencies {
        testCompile("com.h2database:h2:1.3.170")
        testCompile("org.springframework:spring-jdbc:3.2.5.RELEASE") {
            exclude module: "commons-logging"
        }
        testCompile("org.spockframework:spock-core:0.7-groovy-2.0"){
            exclude module: "groovy-all"
        }
        testCompile 'com.github.stefanbirkner:system-rules:1.3.1'
        testCompile("org.slf4j:slf4j-simple:${project.ext.slf4jVersion}")
        testCompile("net.sourceforge.cobertura:cobertura:2.0.3") {
            exclude group: "xerces"
            exclude group: "xml-apis"
        }
        testCompile("xerces:xercesImpl:2.11.0")
    }
}

project.task("bumpVersion") << {
    def versionFile = new File(project.projectDir, "VERSION")
    String version = versionFile.text.trim()
    def m = version =~ /^(\d+\.\d+)\.(\d+)$/
    assert m.matches(): "version $version is not in the [0.0.0] format"
    String majorVersionText = m.group(1)
    String minorVersionText = m.group(2)
    String newMinorVersionText = String.valueOf(Integer.valueOf(minorVersionText) + 1)
    String newVersion = "${majorVersionText}.${newMinorVersionText}-SNAPSHOT"
    versionFile.write(newVersion, "utf-8")
}

def configureOrgPomDetails(pom) {
    pom.project {
        name = project.name
        description = project.description
        url = 'https://github.com/metridoc'
        organization {
            name = 'Upenn Libraries'
            url = 'https://github.com/metridoc'
        }
        licenses {
            license {
                name 'Educational Community License'
                //noinspection GroovyAssignabilityCheck
                url 'http://opensource.org/licenses/ECL-2.0'
                distribution 'repo'
            }
        }
        scm {
            url = 'https://github.com/metridoc/metridoc-job'
            connection = 'https://github.com/metridoc/metridoc-job'
            developerConnection = 'https://github.com/metridoc/metridoc-job'
        }
        developers {
            developer {
                id = 'tbarker'
                name = 'Thomas Barker'
                email = 'tbarker@pobox.upenn.edu'
            }
        }
    }
}
